//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  public static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 21 colors.
  public struct color {
    /// Color `AccentColor`.
    public static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `coinCellBgColor`.
    public static let coinCellBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinCellBgColor")
    /// Color `coinCellSubtitleTextColor`.
    public static let coinCellSubtitleTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinCellSubtitleTextColor")
    /// Color `coinCellTextColor`.
    public static let coinCellTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinCellTextColor")
    /// Color `coinDetailBackColor`.
    public static let coinDetailBackColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinDetailBackColor")
    /// Color `coinDetailBgColor`.
    public static let coinDetailBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinDetailBgColor")
    /// Color `coinDetailPeriodActiveTextColor`.
    public static let coinDetailPeriodActiveTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinDetailPeriodActiveTextColor")
    /// Color `coinDetailPeriodBgColor`.
    public static let coinDetailPeriodBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinDetailPeriodBgColor")
    /// Color `coinDetailPeriodInactiveTextColor`.
    public static let coinDetailPeriodInactiveTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinDetailPeriodInactiveTextColor")
    /// Color `coinDetailTextColor`.
    public static let coinDetailTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "coinDetailTextColor")
    /// Color `mainActionBgColor`.
    public static let mainActionBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainActionBgColor")
    /// Color `mainBgColor`.
    public static let mainBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainBgColor")
    /// Color `mainMenuActionColor`.
    public static let mainMenuActionColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainMenuActionColor")
    /// Color `mainShadowColor`.
    public static let mainShadowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainShadowColor")
    /// Color `mainTextColor`.
    public static let mainTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainTextColor")
    /// Color `searchActionColor`.
    public static let searchActionColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "searchActionColor")
    /// Color `searchBgColor`.
    public static let searchBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "searchBgColor")
    /// Color `settingsBgColor`.
    public static let settingsBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "settingsBgColor")
    /// Color `settingsItemBgColor`.
    public static let settingsItemBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "settingsItemBgColor")
    /// Color `settingsSubtitleTextColor`.
    public static let settingsSubtitleTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "settingsSubtitleTextColor")
    /// Color `settingsTextColor`.
    public static let settingsTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "settingsTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinCellBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinCellBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinCellBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinCellSubtitleTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinCellSubtitleTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinCellSubtitleTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinCellTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinCellTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinCellTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinDetailBackColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinDetailBackColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinDetailBackColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinDetailBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinDetailBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinDetailBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinDetailPeriodActiveTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinDetailPeriodActiveTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinDetailPeriodActiveTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinDetailPeriodBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinDetailPeriodBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinDetailPeriodBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinDetailPeriodInactiveTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinDetailPeriodInactiveTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinDetailPeriodInactiveTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coinDetailTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func coinDetailTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coinDetailTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainActionBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func mainActionBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainActionBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func mainBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainMenuActionColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func mainMenuActionColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainMenuActionColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainShadowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func mainShadowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainShadowColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func mainTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "searchActionColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func searchActionColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.searchActionColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "searchBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func searchBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.searchBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "settingsBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func settingsBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.settingsBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "settingsItemBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func settingsItemBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.settingsItemBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "settingsSubtitleTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func settingsSubtitleTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.settingsSubtitleTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "settingsTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func settingsTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.settingsTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinCellBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinCellBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinCellBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinCellSubtitleTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinCellSubtitleTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinCellSubtitleTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinCellTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinCellTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinCellTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinDetailBackColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinDetailBackColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinDetailBackColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinDetailBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinDetailBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinDetailBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinDetailPeriodActiveTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinDetailPeriodActiveTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinDetailPeriodActiveTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinDetailPeriodBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinDetailPeriodBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinDetailPeriodBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinDetailPeriodInactiveTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinDetailPeriodInactiveTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinDetailPeriodInactiveTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "coinDetailTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func coinDetailTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.coinDetailTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainActionBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func mainActionBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainActionBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func mainBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainMenuActionColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func mainMenuActionColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainMenuActionColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainShadowColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func mainShadowColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainShadowColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func mainTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "searchActionColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func searchActionColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.searchActionColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "searchBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func searchBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.searchBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "settingsBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func settingsBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.settingsBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "settingsItemBgColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func settingsItemBgColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.settingsItemBgColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "settingsSubtitleTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func settingsSubtitleTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.settingsSubtitleTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "settingsTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    public static func settingsTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.settingsTextColor.name)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

public struct _R {
  fileprivate init() {}
}
